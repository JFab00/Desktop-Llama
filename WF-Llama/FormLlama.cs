using System;
using System.Drawing;
using System.Windows.Forms;



namespace WF_Llama
{
    public partial class FormLlama : Form
    {
        PictureBox llama;
        Rectangle directionCoordinate;
        public static Bitmap bmp;
        public FormLlama()
        {
            this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
            InitializeComponent();
            this.FormBorderStyle = FormBorderStyle.None;   /// cut off the windows form's border
            this.Icon = Properties.Resources.icon;
            this.WindowState = FormWindowState.Maximized;       /// fullscreen
            this.TopMost = true;        /// display over everything
            // Creating the llama "object" and using it's "hitbox" (rect)
            displayImg();

            // Makes the background transparent (it makes it green and then it turns transparent... like a green screen)
            this.BackColor = Color.FromArgb(255, 0, 128, 0);
            this.TransparencyKey = BackColor;

        }
        
        public void displayImg()
        {
            
            // Creates a PictureBox
            llama = new PictureBox();
            // Defines the position of the PB
            llama.Location = new Point(75,75);
            // Defines it's backcolor
            llama.BackColor = Color.Transparent;
            Controls.Add(llama);
            // Sets the image of the PB to "llamaWalk"
            llama.Image = Properties.Resources.llamaWalk;
            // Sets it's size, 100x100
            llama.Size = new Size(100, 100);
            // Stretches the image so it will fit better in the square
            llama.SizeMode = PictureBoxSizeMode.StretchImage;

            /*  PRO TIP: if you want to use a gif as a mooving object, but it has a transparent background, be sure the gif is on a bigger scale
                than the actual size you are using in the code, else it will have green pixels around it and stuff, which is really ugly
            
                The green pixels are caused because of the shrinking/enlargment of the image... 
                If you turn a transparent image that is 500x500 into 700x700, the image will gain extra pixels that, if before was black, 
                it will turn into a shade of black (gray) and so, if the background of the winform is green ( Color.FromArgb(255, 0, 128, 0) ), 
                the green will be combined with the gray that was generated by the enlargment of the image, resulting in a shade of that green 
                (a darker green), and so the line of code that turns the bg transparent, won't be able to differentiate between 
                dark green and green... yk?
             */
        }

        private void FormLlama_Paint(object sender, PaintEventArgs e)
        {
            // aa off for texts https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/how-to-use-antialiasing-with-text

            // Defines the direction where the llama is goin
            directionCoordinate = new Rectangle(XDirection, YDirection, 1, 1);
            //label1.Text = XDirection + ",  " + YDirection + "           " + llama.Location.X + ",  " + llama.Location.Y;

        }

        private void FormLlama_Load(object sender, EventArgs e)
        {
            llama.Click += new EventHandler(llama_Click);
            XDirection = getRandomX();
            YDirection = getRandomY();
        }

        Random r = new Random(); // random variable
        int XDirection;
        int YDirection;
        public int getRandomX()
        {
            int x = r.Next(0, Screen.PrimaryScreen.WorkingArea.Width);
            if (x % 10 == 5) return x;
            else
            {
                for (int i = 0; x % 10 != 5; i++)
                    x++;
                return x;
            }
        }

        

        public int getRandomY()
        {
            int y = r.Next(0, Screen.PrimaryScreen.WorkingArea.Height);
            if (y % 10 == 5) return y;
            else
            {
                for (int i = 0; y % 10 != 5; i++)
                    y++;
                return y;
            }
            
        }


        private void llama_Click(object sender, EventArgs e)
        {
            if (timer.Enabled == true)
            {
                if (llama.Tag == "llamaR")
                {
                    llama.Image = Properties.Resources.idle;
                    llama.Tag = "idle";
                }
                else if (llama.Tag == "llamaL")
                {
                    llama.Image = Properties.Resources.idleL;
                    llama.Tag = "idleL";
                }
                timer.Stop();
            }
            else if (timer.Enabled == false)
            {
                if (llama.Tag == "idle")
                {
                    llama.Image = Properties.Resources.llamaWalk;
                    llama.Tag = "llamaR";
                }
                else if (llama.Tag == "idleL")
                {
                    llama.Image = Properties.Resources.llamaWalkL;
                    llama.Tag = "llamaL";
                }
                timer.Start();

            }
        }


        bool check;
        public Point MovePointTowards(Point a, Point b, double distance)    // https://stackoverflow.com/questions/4702782/move-point-to-another-in-c-sharp
        {
            var vector = new Point(b.X - a.X, b.Y - a.Y);
            var length = Math.Sqrt(vector.X * vector.X + vector.Y * vector.Y);
            if(length == 0)
                length = 1;
            var unitVector = new Point(Convert.ToInt32(vector.X / length), Convert.ToInt32(vector.Y / length)); 
            return new Point(Convert.ToInt32(a.X + unitVector.X * distance), Convert.ToInt32(a.Y + unitVector.Y * distance));
        }


        bool lc,dc;


        private void timer_Tick(object sender, EventArgs e)         // form's update
        {
            //label1.Text = "Coordinates: (" + XDirection + ", " + YDirection+ ") Llama's position: (" + llama.Location.X + ", " + llama.Location.Y + ")";
            if(lc == false && dc == false)
                lbCoord.Text = "";
            if(lc == true || dc == true)
            {
                if (lc == true && dc != true)
                    lbCoord.Text = "Lama Coordinates(X, Y):" + llama.Location.X + ", " + llama.Location.Y;
                else if (lc != true && dc == true)
                    lbCoord.Text = "Destination Coordinates(X, Y):" + XDirection + ", " + YDirection;
                else if (lc == true && dc == true)
                    lbCoord.Text = "Lama Coordinates(X, Y):" + llama.Location.X + ", " + llama.Location.Y + "\r\nDestination Coordinates(X, Y):" + XDirection + ", " + YDirection;
            }
            if (check == false) // changes the gif animation of the llama
            {
                if (llama.Location.X > XDirection)
                {
                    llama.Image = Properties.Resources.llamaWalkL;
                    llama.Tag = "llamaL";
                }
                else if (llama.Location.X < XDirection)
                {
                    llama.Image = Properties.Resources.llamaWalk;
                    llama.Tag = "llamaR";
                }
                
            }
            check = true;

            llama.Location = MovePointTowards(llama.Location, new Point(XDirection,YDirection), 1); // moves the llama

            if (YDirection == llama.Location.Y && XDirection == llama.Location.X)   // if the llama has reached the destination
            {
                if (llama.Tag == "llamaR")
                    llama.Image = Properties.Resources.idle;
                else if (llama.Tag == "llamaL")
                    llama.Image = Properties.Resources.idleL;
                timer.Stop();
                timerApp.Start();

                XDirection = getRandomX();
                YDirection = getRandomY();
                check = false;
            }

            Invalidate();
        }

        private void timerApp_Tick(object sender, EventArgs e)
        { 
            timerApp.Stop();
            timer.Start();
        }

        private void button1_MouseEnter(object sender, EventArgs e)
        {
            if(button1.Tag == "!Active")
                button1.BackgroundImage = Properties.Resources.menuIconSW;
        }

        private void button1_MouseLeave(object sender, EventArgs e)
        {
            if(button1.Tag == "!Active")
                button1.BackgroundImage = Properties.Resources.menuIconS;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (button1.Tag == "!Active")
            {
                button1.Tag = "Active";
                button1.BackgroundImage = Properties.Resources.menuIconSW;
                cbLC.Show();
                cbDC.Show();
                btnExit.Show();
            }
            else if(button1.Tag == "Active")
            {
                button1.Tag = "!Active";
                button1.BackgroundImage = Properties.Resources.menuIconS;
                cbLC.Hide();
                cbDC.Hide();
                btnExit.Hide();
            }
        }

        private void cbDC_CheckedChanged(object sender, EventArgs e)
        {
            if (cbDC.Checked == true)
                dc = true;
            else if (cbDC.Checked == false)
                dc = false;
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            System.Windows.Forms.Application.ExitThread();
        }

        private void cbLC_CheckedChanged(object sender, EventArgs e)
        {
            if (cbLC.Checked == true)
                lc = true;
            else if (cbLC.Checked == false)
                lc = false;

        }
    }
}
 